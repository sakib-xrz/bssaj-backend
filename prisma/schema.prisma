generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                      @id @default(uuid())
  name                     String
  email                    String                      @unique
  password                 String
  role                     Role                        @default(STUDENT)
  profile_picture          String?
  address                  String?
  current_study_info       String?
  is_deleted               Boolean                     @default(false)
  created_at               DateTime                    @default(now())
  updated_at               DateTime                    @updatedAt
  approved_agencies        Agency[]                    @relation("AgencyApprover")
  agencies                 Agency[]
  approved_blogs           Blog[]                      @relation("BlogApprover")
  blogs                    Blog[]
  events                   Event[]
  exam_registrations       ExamRegistration[]
  approved_members         Member[]                    @relation("MemberApprover")
  member                   Member?
  notifications            Notification[]
  approved_agency_payments AgencySubscriptionPayment[] @relation("PaymentApprover")

  @@map("users")
}

model Member {
  id             String           @id @default(uuid())
  member_id      String           @unique
  user_id        String           @unique
  name           String
  email          String           @unique
  phone          String
  status         MembershipStatus @default(PENDING)
  kind           MemberKind
  is_deleted     Boolean          @default(false)
  approved_at    DateTime?
  approved_by_id String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  approved_by    User?            @relation("MemberApprover", fields: [approved_by_id], references: [id])
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("members")
}

model Agency {
  id                    String                      @id @default(uuid())
  user_id               String
  name                  String
  logo                  String?
  description           String?
  website               String?
  contact_email         String
  agency_email          String?
  contact_phone         String?
  address               String?
  facebook_url          String?
  established_year      Int?
  director_name         String?
  status                AgencyStatus                @default(PENDING)
  subscription_status   SubscriptionStatus          @default(ACTIVE)
  is_visible            Boolean                     @default(true)
  last_payment_month    String? // Format: "YYYY-MM" (e.g., "2025-09")
  subscription_end_date DateTime?
  approved_at           DateTime?
  approved_by_id        String?
  is_deleted            Boolean                     @default(false)
  created_at            DateTime                    @default(now())
  updated_at            DateTime                    @updatedAt
  cover_photo           String?
  user_selection_type   UserSelectionType           @default(NEW)
  success_stories       AgencySuccessStory[]
  approved_by           User?                       @relation("AgencyApprover", fields: [approved_by_id], references: [id])
  user                  User                        @relation(fields: [user_id], references: [id])
  certifications        Certification[]
  subscription_payments AgencySubscriptionPayment[]

  @@map("agencies")
}

model AgencySuccessStory {
  id        String @id @default(uuid())
  agency_id String
  image     String
  agency    Agency @relation(fields: [agency_id], references: [id], onDelete: Cascade)
}

model Blog {
  id             String    @id @default(uuid())
  title          String
  slug           String    @unique
  content        String
  author_id      String
  cover_image    String?
  is_published   Boolean   @default(false)
  is_approved    Boolean   @default(false)
  approved_at    DateTime?
  approved_by_id String?
  is_deleted     Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  approved_by    User?     @relation("BlogApprover", fields: [approved_by_id], references: [id])
  author         User      @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@map("blogs")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  event_date  DateTime
  cover_image String?
  author_id   String
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  author      User     @relation(fields: [author_id], references: [id])

  @@map("events")
}

model News {
  id         String   @id @default(uuid())
  title      String
  content    String
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("news")
}

model Scholarship {
  id              String   @id @default(uuid())
  title           String
  description     String
  eligibility     String?
  amount          Int?
  deadline        DateTime
  application_url String
  is_deleted      Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("scholarships")
}

model Certification {
  id              String   @id @default(uuid())
  sl_no           String
  name            String
  date_of_birth   DateTime
  gender          String
  father_name     String
  mother_name     String
  student_id      String
  completed_hours String
  grade           String
  course_duration String
  issued_at       DateTime
  institute_name  String
  agency_id       String
  certificate_url String?
  agency          Agency?  @relation(fields: [agency_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("certifications")
}

model ExamRegistration {
  id                    String                 @id @default(uuid())
  user_id               String
  exam_name             String
  exam_date             DateTime
  registration_date     DateTime               @default(now())
  status                ExamRegistrationStatus @default(PENDING_PAYMENT)
  exam_link             String
  certificate_issued    Boolean                @default(false)
  issued_certificate_id String?                @unique
  is_deleted            Boolean                @default(false)
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  user                  User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("exam_registrations")
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String
  title      String
  message    String
  is_read    Boolean  @default(false)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  type        JobType
  salary_min  Int?
  salary_max  Int?
  deadline    DateTime
  apply_link  String
  is_active   Boolean  @default(true)
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("jobs")
}

model Committee {
  id              String   @id @default(uuid())
  name            String
  designation     String
  term_start_year String
  term_end_year   String
  profile_picture String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("committees")
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  link        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("banners")
}

model AgencySubscriptionPayment {
  id             String        @id @default(uuid())
  agency_id      String
  payment_month  String // Format: "YYYY-MM" (e.g., "2025-09")
  amount         Decimal       @db.Decimal(10, 2)
  payment_date   DateTime
  payment_status PaymentStatus @default(PENDING)
  payment_method String? // e.g., "bank_transfer", "mobile_banking", etc.
  transaction_id String? // External transaction reference
  notes          String? // Any additional notes about the payment
  approved_at    DateTime? // When payment was approved
  approved_by_id String? // Who approved the payment
  is_deleted     Boolean       @default(false)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  agency         Agency        @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  approved_by    User?         @relation("PaymentApprover", fields: [approved_by_id], references: [id])

  @@unique([agency_id, payment_month])
  @@map("agency_subscription_payments")
}

enum ComplainStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum MemberKind {
  ADVISER
  HONORABLE
  EXECUTIVE
  ASSOCIATE
  STUDENT_REPRESENTATIVE
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AGENCY
  STUDENT
  USER
}

enum ParticipantStatus {
  REGISTERED
  CANCELLED
  ATTENDED
  NO_SHOW
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum AgencyStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
  FREELANCE
}

enum ExamRegistrationStatus {
  PENDING_PAYMENT
  REGISTERED
  CANCELLED
  COMPLETED
}

enum UserSelectionType {
  NEW
  EXISTING
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  SUSPENDED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  OVERDUE
}
